# OCP parameters for end-effector reaching task

# # Goal placement M = ( M_ee.rot @ rpyToMat(0, pi/2, 0) , [0.3, 0., 0.7] )
#   R =
#    -0.918754     0.389418    0.0651533
#     0.388443     0.921061   -0.0275464
#   -0.0707372 -2.41653e-08    -0.997495
#   p = 0.3   0 0.7
# # Starting config for IK (to avoid self-collision solution)
# q_init =  [-0.2263,  0.    , -0.174 , -1.6865,  0.0358,  1.5   , -0.3946]
# # Solution of IK_placement(q_init, M)
# q0 = [-0.1194, -0.1913,  0.0971, -1.3812, -0.008 ,  1.885 ,  0.3739]

# General 
LPF_TYPE: 1
f_c: 5                                                               # Low-pass filter cut-off frequency
tau_plus_integration: False
dt: 0.02                                                             # OCP integration step 
N_h: 400                                                             # Horizon length in nodes
maxiter: 1000                                                        # Max number of iterations in DDP
q0: [-0.1194, -0.1913,  0.0971, -1.3812, -0.008 ,  1.885 ,  0.3739]  # Initial robot joint configuration
dq0: [0.,0.,0.,0.,0.,0.,0.]                                          # Initial robot joint velocity
tau0: [  0., -16.4279,  -0.,  14.4554, -0.6963, 0.027, 0.]           # Initial robot joint torque
WHICH_PLOTS: ['all']


# Cost function composition (a.k.a which terms will be actually used in the OCP)
# to select from the list : 'stateReg', 'ctrlReg', 'ctrlRegGrav', 'stateLim', 'ctrlLim'
#                           'force', 'friction', 'translation', 'velocity', 'placement'
# WHICH_COSTS: ['translation', 'velocity', 'ctrlRegGrav', 'stateReg'] #, 'stateLim'] 
WHICH_COSTS: ['translation', 'ctrlRegGrav', 'stateReg']

# Cost function weights and activations
 # 'stateReg' : state regularization  
stateRegWeights: [0., 0., 0., 0., 0., 0. ,0., 2., 2., 2., 2., 2., 2., 2.]
stateRegWeight: .1
stateRegWeightTerminal: .1
stateRegRef: 'DEFAULT'  # 'DEFAULT' = [q0, v0]

 # 'ctrlReg' : torque regularization 
ctrlRegWeights: [1., 1., 1., 1., 1., 1., 1.]
ctrlRegWeight: 0.01
ctrlRegWeightTerminal: 0.01
ctrlRegRef: 'DEFAULT'   # DEFAULT = g(q) | NOT used for 'ctrlRegGrav' cost

# 'wReg' : unfiltered torque regularization
wRegWeight: 0.0001
wRegRef: 'tau0'  # in ['zero', 'tau0', 'gravity']

# 'wLim' : unfiltered torque limit
wLimWeight: 10.

 # 'translation' : end-effector frame translation 
frameTranslationWeights:  [1., 1., 1.]
frameTranslationWeight: 50.
frameTranslationWeightTerminal: 50.
frameTranslationRef: 'DEFAULT'         # Not used here (circle tracking)
frameTranslationFrameName: 'contact'   
frameCircleTrajectoryRadius: 0.1       # in m
frameCircleTrajectoryVelocity: 1.5     # in rad/s
CIRCLE_LOCAL_PLANE: 'XY'               # LOCAL plane in which the circle lies

 # 'velocity' : end-effector frame velocity (translation + rotation)
frameVelocityWeights:  [1., 1., 1., 0., 0., 0.]
frameVelocityWeight: 0.
frameVelocityWeightTerminal: 0.
frameVelocityRef: [0., 0., 0., 0., 0., 0.]    
frameVelocityFrameName: 'contact'    

 # 'stateLim' : state limits
stateLimWeights: [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
stateLimWeight: 0.
stateLimWeightTerminal: 0.
coef_xlim: 1.

 # 'ctrlLim' : torque limits
# ctrlLimWeights: [1., 1., 1., 1., 1., 1., 1.]
# ctrlLimWeight: 0.
# ctrlLimWeightTerminal: 0.
# coef_ulim: 1.

# armature
armature: [.1, .1, .1, .1, .1, .1, .0]