# ROBOT : 'iiwa' 
# TASK  : normal force task

# with Low-Pass-Filter (LPF) in dynamics


# MPC & sim parameters
simu_freq: 1000        # Simulation frequency in Hz
ctrl_freq: 500        # Control frequency
plan_freq: 500       # Planning frequency
T_tot: 3.              # Simu duration (s)
# Simulation options
DELAY_SIM: False               # Add delay in reference torques (low-level)
DELAY_OCP: False               # Add delay in OCP solution (i.e. ~1ms resolution time)
SCALE_TORQUES: False           # Affine scaling of reference torque
NOISE_TORQUES: False           # Add Gaussian noise on reference torques
FILTER_TORQUES: False          # Moving average smoothing of reference torques
TORQUE_TRACKING: False        # Simulate low-level torque control loop
NOISE_STATE: False             # Add Gaussian noise on the measured state 
FILTER_STATE: False            # Moving average smoothing of reference torques
SAVE_DATA: False                # Save plot_data to npz
RECORD_SOLVER_DATA: False      # Keep trace of Vxx, Riccati gains, reg, Jacobian etc. (more data to save)
INIT_LOG: True                 # Initial logs summarizing parameters
init_log_display_time: 1       # How long (s) to display the initial logs ?
LOG: True                      # Logs during simulation
log_rate: 500                  # Display sim status once very 'log_rate' sim cycles
WHICH_PLOTS: ['w']

# # Goal placement M = ( M_ee.rot @ rpyToMat(0, pi/2, 0) , [0.3, 0., 0.7] )
#   R =
#    -0.918754     0.389418    0.0651533
#     0.388443     0.921061   -0.0275464
#   -0.0707372 -2.41653e-08    -0.997495
#   p = 0.3   0 0.7
# # Starting config for IK (to avoid self-collision solution)
# q_init =  [-0.2263,  0.    , -0.174 , -1.6865,  0.0358,  1.5   , -0.3946]
# # Solution of IK_placement(q_init, M)
# q0 = [-0.1194, -0.1913,  0.0971, -1.3812, -0.008 ,  1.885 ,  0.3739]

# General 
LPF_TYPE: 1                            # (0) ZOH (1) Euler (2) exact EMA
f_c: 5                                 # Low-pass filter cut-off frequency
tau_plus_integration: False            # semi-implicit if true, explicit if false
dt: 0.01                                                             # OCP integration step 
N_h: 100                                                             # Horizon length in nodes
maxiter: 5                                                        # Max number of iterations in DDP
q0: [-0.1194, -0.1913,  0.0971, -1.3812, -0.008 ,  1.885 ,  0.3739]  # Initial robot joint configuration
dq0: [0.,0.,0.,0.,0.,0.,0.]                                          # Initial robot joint velocity
tau0: [  0., -16.4279,  -0.,  14.4554, -0.6963, 0.027, 0.]           # Initial robot joint torque



# Pin model frame name of the end-effector 
#   - Used for frame-related costs and plots generation
#   - Overrides the frame name 'DEFAULT' values below
frame_of_interest: 'contact'



# List of contacts
contacts:
  - {
      contactModelFrameName: 'contact',     # frame name in pinocchio model
      pinocchioReferenceFrame: 'LOCAL',     # LOCAL, WORLD, LOCAL_WORLD_ALIGNED
      contactModelType: '6D',              # 1Dx, 1Dy, 1Dz, 3D, 6D
      contactModelTranslationRef: '',       # 3d vector
      contactModelRotationRef: '',          # 3d matrix
      contactModelGains: [0, 50],           # Baumgarte stabilization gains
      active: True                          # Initially active? 
    }


# Cost function composition (a.k.a which terms will be actually used in the OCP)
# to select from the list : 'stateReg', 'ctrlReg', 'ctrlRegGrav', 'stateLim', 'ctrlLim'
#                           'force', 'friction', 'translation', 'velocity', 'placement'
WHICH_COSTS: ['force', 'rotation', 'stateReg', 'stateLim',  'ctrlRegGrav']  

# Cost function weights and activations
 # 'force' : end-effector frame force (translation + rotation)
frameForceWeights:  [0., 0., 1., 0., 0., 0.]
frameForceWeight: 10.
frameForceWeightTerminal: 10.
frameForceRef: [0., 0., -20, 0., 0., 0.]    
frameForceFrameName: 'contact'

 # 'stateReg' : state regularization  
stateRegWeights: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 2., 2., 2., 2., 2., 2., 2.]
stateRegWeight: 0.1
stateRegWeightTerminal: 10
stateRegRef: 'DEFAULT'

 # 'ctrlReg' : torque regularization 
ctrlRegWeights: [1., 1., 1., 1., 1., 1., 1.]
ctrlRegWeight: 0.001
ctrlRegWeightTerminal: 0.1
ctrlRegRef: 'DEFAULT'  # default 0 if None

# 'wReg' : unfiltered torque regularization
wRegWeight: 0.0001
wRegRef: 'zero'

# 'wLim' : unfiltered torque limit
wLimWeight: 100

 # 'translation' : end-effector frame translation 
frameTranslationWeights:  [1., 1., 0.]
frameTranslationWeight: 20.
frameTranslationWeightTerminal: 20. 
frameTranslationRef: 'DEFAULT'
frameTranslationFrameName: 'contact'

 # 'velocity' : end-effector frame velocity (translation + rotation)
frameVelocityWeights:  [1., 1., 1., 1., 1., 1.]
frameVelocityWeight: .01
frameVelocityWeightTerminal: .01
frameVelocityRef: 'DEFAULT'    
frameVelocityFrameName: 'contact'


 # 'rotation' : end-effector frame orientation
frameRotationWeights:  [1., 1., 1.]
frameRotationWeight: 10.
frameRotationWeightTerminal: 10.
frameRotationRef: 'DEFAULT'
frameRotationFrameName: 'contact'


 # 'stateLim' : state limits
stateLimWeights: [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
stateLimWeight: 0.
stateLimWeightTerminal: 0.
coef_xlim: 1

 # 'ctrlLim' : torque limits
ctrlLimWeights: [1., 1., 1., 1., 1., 1., 1.]
ctrlLimWeight: 10
ctrlLimWeightTerminal: 10
coef_ulim: 1 

# armature
armature: [.1, .1, .1, .1, .1, .1, 0.]

# # # # # # # # # # # # # # # # # # # # # #
# Low-level simulation (actuation model)  #
# # # # # # # # # # # # # # # # # # # # # #
  # Scaling of desired torque
alpha_min: 0.95
alpha_max: 1.05
beta_min: -0.1
beta_max: 0.1
  # White noise on desired torque and measured state
var_u: [3.0, 3.0, 2.0, 2.0, 1.0, 0.1, 0.1]
var_q: 0.028 #x10
var_v: 0.028 #x10
  # Buffer for torque delay
delay_OCP_ms: 1    # in ms
delay_sim_cycle: 2 # in HF cycles
  # Proportional-integral torque control gains
Kp_low: [.2, .2, .2, .2, .2, .2, .2  ]
Ki_low: [.001, .001, .001, .001, .001, .001, .01]
Kd_low: [.00001, .00001, .00001, .00001, .00001, .00001, .00001]
u_avg_filter_length: 20 #8 # in HF cycles
x_avg_filter_length: 5  #20 #8 # in HF cycles