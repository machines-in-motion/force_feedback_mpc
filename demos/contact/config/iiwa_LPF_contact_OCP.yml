# ROBOT : 'iiwa' 
# TASK  : normal force task

# with Low-Pass-Filter (LPF) in dynamics


# # Goal placement M = ( M_ee.rot @ rpyToMat(0, pi/2, 0) , [0.3, 0., 0.7] )
#   R =
#    -0.918754     0.389418    0.0651533
#     0.388443     0.921061   -0.0275464
#   -0.0707372 -2.41653e-08    -0.997495
#   p = 0.3   0 0.7
# # Starting config for IK (to avoid self-collision solution)
# q_init =  [-0.2263,  0.    , -0.174 , -1.6865,  0.0358,  1.5   , -0.3946]
# # Solution of IK_placement(q_init, M)
# q0 = [-0.1194, -0.1913,  0.0971, -1.3812, -0.008 ,  1.885 ,  0.3739]

# General 
LPF_TYPE: 1                            # (0) ZOH (1) Euler (2) exact EMA
f_c: 2                                 # Low-pass filter cut-off frequency
tau_plus_integration: False            # semi-implicit if true, explicit if false
dt: 0.01                                                             # OCP integration step 
N_h: 400                                                             # Horizon length in nodes
maxiter: 1000                                                        # Max number of iterations in DDP
q0: [-0.1194, -0.1913,  0.0971, -1.3812, -0.008 ,  1.885 ,  0.3739]  # Initial robot joint configuration
dq0: [0.,0.,0.,0.,0.,0.,0.]                                          # Initial robot joint velocity
tau0: [  0., -16.4279,  -0.,  14.4554, -0.6963, 0.027, 0.]           # Initial robot joint torque
WHICH_PLOTS: ['all']                                          # which plots to generate 



# Pin model frame name of the end-effector 
#   - Used for frame-related costs and plots generation
#   - Overrides the frame name 'DEFAULT' values below
frame_of_interest: 'contact'


# List of contacts
contacts:
  - {
      contactModelFrameName: 'contact',       # frame name in pinocchio model
      pinocchioReferenceFrame: 'LOCAL_WORLD_ALIGNED',       #LOCAL, WORLD, LOCAL_WORLD_ALIGNED
      contactModelType: '1Dz',                 # 1Dx, 1Dy, 1Dz, 3D, 6D
      contactModelTranslationRef: '',         # 3d vector
      contactModelRotationRef: '',            # 3d matrix
      contactModelGains: [5, 10.],             # Baumgarte stabilization gains
      active: True                            # Initially active? 
    }


# Cost function composition (a.k.a which terms will be actually used in the OCP)
# to select from the list : 'stateReg', 'ctrlReg', 'ctrlRegGrav', 'stateLim', 'ctrlLim'
#                           'force', 'friction', 'translation', 'velocity', 'placement'
WHICH_COSTS: ['force', 'translation',  'stateReg',  'ctrlRegGrav']  

# Cost function weights and activations
 # 'force' : end-effector frame force (translation + rotation)
frameForceWeights:  [0., 0., 1., 0., 0., 0.]
frameForceWeight: 10.
frameForceWeightTerminal: 10.
frameForceRef: [0., 0., -20, 0., 0., 0.]    
frameForceFrameName: 'contact'


 # 'stateReg' : state regularization  
stateRegWeights: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 2., 2., 2., 2., 2., 2., 2.]
stateRegWeight: 0.1
stateRegWeightTerminal: 10
stateRegRef: 'DEFAULT'

 # 'ctrlReg' : torque regularization 
ctrlRegWeights: [1., 1., 1., 1., 1., 1., 1.]
ctrlRegWeight: 0.001
ctrlRegWeightTerminal: 0.1
ctrlRegRef: 'DEFAULT'  # default 0 if None

# 'wReg' : unfiltered torque regularization
wRegWeight: 0.005
wRegRef: 'tau0' # in ['zero', 'tau0' , 'gravity']

# 'wLim' : unfiltered torque limit
wLimWeight: 100

 # 'translation' : end-effector frame translation 
frameTranslationWeights:  [1., 1., 0.]
frameTranslationWeight: 20.
frameTranslationWeightTerminal: 20. 
frameTranslationRef: 'DEFAULT'
frameTranslationFrameName: 'contact'


#  # 'velocity' : end-effector frame velocity (translation + rotation)
# frameVelocityWeights:  [1., 1., 1., 1., 1., 1.]
# frameVelocityWeight: .01
# frameVelocityWeightTerminal: .01
# frameVelocityRef: 'DEFAULT'    
# frameVelocityFrameName: 'DEFAULT'


#  # 'rotation' : end-effector frame orientation
# frameRotationWeights:  [1., 1., 1.]
# frameRotationWeight: 10.
# frameRotationWeightTerminal: 10.
# frameRotationRef: 'DEFAULT'
# frameRotationFrameName: 'DEFAULT'

 # 'stateLim' : state limits
stateLimWeights: [1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]
stateLimWeight: 0.
stateLimWeightTerminal: 0.
coef_xlim: 1

 # 'ctrlLim' : torque limits
ctrlLimWeights: [1., 1., 1., 1., 1., 1., 1.]
ctrlLimWeight: 10
ctrlLimWeightTerminal: 10
coef_ulim: 1

# armature
armature: [.1, .1, .1, .1, .1, .1, 0.]